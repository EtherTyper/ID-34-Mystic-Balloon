#ifndef MENU_BITMAPS_H
#define MENU_BITMAPS_H

#include "inputs.h"
#include "game.h"

//define menu states (on main menu)
#define STATE_MENU_INTRO         0
#define STATE_MENU_MAIN          1
#define STATE_MENU_HELP          2
#define STATE_MENU_PLAY          3
#define STATE_MENU_INFO          4
#define STATE_MENU_SOUNDFX       5

//define game states (on main menu)
#define STATE_GAME_PLAYING       6
#define STATE_GAME_PAUSE         7
#define STATE_GAME_OVER          8

extern byte gameState;

boolean soundYesNo;
int menuSelection;
byte counter = 0;
byte blinkingFrames = 0;
byte sparkleFrames = 0;

const uint8_t PROGMEM TEAMarg[] = {
  0x7f, 0x2f, 0x30, 0x68, 0xb7, 0xdb, 0xed, 0xdb, 0x53, 0x9f, 0xfa, 0x73, 0x97, 0xbb, 0xd5, 0xe7,
  0x2e, 0x77, 0xb9, 0xcb, 0x5d, 0x6e, 0xbb, 0xbd, 0xdc, 0xe5, 0x2e, 0x77, 0xb9, 0xcb, 0x5d, 0xee,
  0x72, 0x97, 0x5b, 0x2b, 0xbb, 0xdc, 0x6e, 0xb7, 0xdb, 0xed, 0x76, 0xbb, 0xdd, 0x6e, 0xb7, 0xdb,
  0xed, 0x76, 0xbb, 0xdd, 0x6e, 0xb7, 0xca, 0xae, 0x43, 0x57, 0x76, 0xbb, 0x5d, 0x6e, 0xb7, 0xdb,
  0xed, 0x76, 0xbb, 0xdd, 0x6e, 0xb7, 0xdb, 0xad, 0xb2, 0xdb, 0x75, 0xd8, 0x5a, 0x2a, 0xb9, 0xdd,
  0x6e, 0xb7, 0xeb, 0x75, 0x74, 0xd9, 0xe5, 0x72, 0xf9, 0xfd, 0xdf, 0xea, 0x72, 0x57, 0x77, 0x75,
  0x97, 0x3b, 0x6d, 0x95, 0x93, 0xca, 0x2a, 0xbb, 0x0e, 0xbf, 0x6d, 0x6f, 0x75, 0xab, 0xed, 0xb9,
  0x5c, 0x77, 0x2a, 0xcf, 0x9f, 0x76, 0xda, 0xd5, 0xad, 0x4e, 0xf7, 0xaa, 0x57, 0xe9, 0x74, 0x3a,
  0x9d, 0xbb, 0xa4, 0xc2, 0xd1, 0x76, 0xb6, 0xb4, 0xd3, 0x2e, 0x9f, 0x5e, 0x5a, 0x85, 0xbc, 0x74,
  0x3a, 0x9d, 0x4e, 0xa7, 0x3b, 0x67, 0x57, 0x5b, 0xaf, 0x93, 0x4a, 0xb9, 0x9d, 0x52, 0xca, 0x2d,
  0x97, 0xdb, 0x74, 0x6c, 0x49, 0xe5, 0x9c, 0x92, 0x4a, 0x2a, 0xa9, 0xa4, 0x53, 0x84, 0xe9, 0xf4,
  0xea, 0x53, 0xbf, 0x56, 0x2a, 0x65, 0xed, 0x6e, 0xa7, 0x94, 0x52, 0x4a, 0x46, 0x9f, 0x5e, 0xaf,
  0x97, 0xcb, 0x6d, 0xbc, 0x4b, 0xe7, 0x5c, 0xff, 0x13, 0x7a, 0x9f, 0xde, 0xce, 0xbe, 0xd6, 0xb9,
  0xee, 0xd4, 0xae, 0x3b, 0xb5, 0x6e, 0x7b, 0xab, 0x5b, 0x8d, 0x24, 0x25, 0x4b, 0x29, 0x95, 0x4a,
  0x76, 0x56, 0x3a, 0x1d, 0xdb, 0xce, 0xcd, 0x96, 0x4e, 0xa7, 0xd3, 0xe9, 0xec, 0x4e, 0x4a, 0xe9,
  0xec, 0x08, 0xdb, 0x3a, 0x67, 0xe7, 0x52, 0xb3, 0x29, 0x2d, 0xf5, 0xa8, 0x4b, 0xa7, 0xd3, 0xe9,
  0x74, 0xce, 0xb9, 0x5b, 0x2f, 0xdd, 0x6a, 0x87, 0xac, 0xa4, 0x2a, 0x25, 0x95, 0x54, 0x52, 0x49,
  0x25, 0xed, 0x36, 0xa4, 0xed, 0xdc, 0x64, 0x49, 0xa5, 0x64, 0xc8, 0x5a, 0x2a, 0x1d, 0xda, 0xc2,
  0x1b, 0x11, 0x06, 0xb9, 0x2a, 0x95, 0x4c, 0x55, 0x2a, 0xa2, 0xc6, 0xd5, 0xea, 0x56, 0xb7, 0xdd,
  0x6e, 0xb7, 0x4a, 0x4a, 0x55, 0xa5, 0x2a, 0x95, 0x52, 0x2a, 0x55, 0xc9, 0x54, 0xaa, 0x92, 0xa9,
  0x54, 0x25, 0x53, 0x29, 0xa5, 0xdd, 0xf4, 0x69, 0x25, 0xa5, 0x54, 0xed, 0x5c, 0xe7, 0x3a, 0xe7,
  0x9c, 0x73, 0x4a, 0x2a, 0x3b, 0x15, 0x51, 0x52, 0xf1, 0x79, 0xa5, 0xd3, 0x49, 0x25, 0x95, 0xdc,
  0x6e, 0xb7, 0xdb, 0xed, 0x36, 0x9d, 0xce, 0x6e, 0xff, 0xff, 0xd3, 0xa7, 0x75, 0x3a, 0x1d, 0xd9,
  0xce, 0x39, 0xe7, 0x1c, 0xd3, 0xce, 0x39, 0xe7, 0x9c, 0xeb, 0x5c, 0xe7, 0x9c, 0x73, 0x6e, 0xf2,
  0xa4, 0x54, 0x52, 0x2a, 0xbb, 0xdd, 0x6e, 0x2f, 0xad, 0xb4, 0xd2, 0xf9, 0xb4, 0x72, 0x4e, 0x6e,
  0x63, 0x95, 0xce, 0x39, 0xa9, 0x3e, 0xf5, 0x6f, 0x8f, 0x08, 0x87, 0x64, 0xc9, 0x54, 0x32, 0xa2,
  0xb6, 0xdb, 0xed, 0xea, 0x56, 0xb7, 0x3d, 0x9d, 0x4e, 0xa7, 0x5b, 0x5d, 0x77, 0x4a, 0xb9, 0xfe,
  0xa7, 0x4a, 0xd6, 0xd2, 0x29, 0xd5, 0x5d, 0xab, 0x63, 0xeb, 0x55, 0xaf, 0xf2, 0x4a, 0x72, 0xef,
  0xdc, 0x76, 0xbb, 0x5d, 0x6e, 0xb7, 0x4a, 0x2a, 0xe7, 0x56, 0x3b, 0x19, 0xd1, 0x76, 0x2e, 0x65,
  0xb7, 0xdb, 0xd5, 0xbd, 0xea, 0x5c, 0xe7, 0x3a, 0x9d, 0xdd, 0x6e, 0xb7, 0x5b, 0x25, 0x9d, 0xb3,
  0xe9, 0x94, 0x54, 0x52, 0x49, 0x25, 0x95, 0x54, 0xaa, 0x94, 0x2a, 0x25, 0x95, 0x54, 0xd2, 0x59,
  0x75, 0xdb, 0xed, 0xae, 0x5e, 0x75, 0xae, 0x73, 0x9d, 0xeb, 0xd4, 0xa7, 0x3e, 0xf5, 0xb9, 0xda,
  0xee, 0xa4, 0xb4, 0xca, 0x6e, 0xb7, 0xdb, 0xad, 0x73, 0xee, 0xda, 0x39, 0xbb, 0xba, 0xb7, 0x53,
  0x25, 0x95, 0xdc, 0x2e, 0x95, 0x53, 0xf6, 0x72, 0x97, 0x93, 0x4a, 0x3a, 0xa9, 0xa4, 0x3a, 0xa5,
  0x7a, 0x95, 0xfa, 0x5c, 0xa7, 0xd3, 0x69, 0xae, 0xed, 0x2a, 0xa9, 0x64, 0x25, 0x95, 0x4e, 0xa7,
  0xd3, 0xe9, 0xd0, 0x97, 0x5e, 0x67, 0xb7, 0xa1, 0x69, 0x9d, 0x1d, 0xcb, 0xe9, 0xed, 0x36, 0x34,
  0xea, 0x74, 0x3a, 0x9d, 0x56, 0x4a, 0x2a, 0xa9, 0x94, 0x4e, 0xa7, 0x53, 0x44, 0x4a, 0x56, 0xa9,
  0xaa, 0x54, 0x2a, 0x25, 0x75, 0x5a, 0x6d, 0x95, 0x74, 0xeb, 0x74, 0xe7, 0x8a, 0x4a, 0xc9, 0x2a,
  0x55, 0x95, 0x4a, 0xa5, 0xa4, 0x56, 0xd2, 0x39, 0xe7, 0xb6, 0xdb, 0xed, 0xf6, 0xed, 0x29, 0x59,
  0xc9, 0x4a, 0x2a, 0xe2, 0x74, 0xb4, 0xe9, 0xd0, 0xb5, 0xce, 0x8e, 0xfd, 0x74, 0x3a, 0xb4, 0x01
};

const unsigned char PROGMEM qrcode[] =  //64,64
{
  0x3f, 0x3f, 0xa9, 0xa5, 0x92, 0x6a, 0xbb, 0xfd, 0xd4, 0xa7, 0x3e, 0xf5, 0xa9, 0x4f, 0x7d, 0x6a,
  0xbb, 0x95, 0x4a, 0x92, 0x6e, 0xe7, 0x74, 0xce, 0x71, 0x7e, 0xea, 0x53, 0xdb, 0x79, 0xb7, 0xbb,
  0x4f, 0x7d, 0x72, 0xbb, 0xdb, 0x6e, 0x3f, 0xf5, 0xa9, 0xed, 0xac, 0x52, 0x49, 0xb5, 0xdd, 0x7e,
  0xea, 0x53, 0x9f, 0xfa, 0xd4, 0xa7, 0x3e, 0xb5, 0xdd, 0x4a, 0x25, 0xf1, 0xc5, 0xa7, 0xd3, 0x76,
  0xbb, 0xdd, 0x6e, 0xb7, 0xa7, 0xd3, 0x84, 0x84, 0xaf, 0x7a, 0x95, 0xdd, 0xbe, 0xab, 0x5d, 0x72,
  0x7b, 0x6a, 0xbb, 0x6a, 0xbb, 0xd5, 0x69, 0xb9, 0xbd, 0xec, 0xb6, 0xec, 0x76, 0x77, 0xb9, 0x7f,
  0xd5, 0x3b, 0x9d, 0xe6, 0xe3, 0xd3, 0x69, 0xbb, 0xdd, 0x6e, 0xb7, 0xdb, 0xd3, 0x69, 0x42, 0x7c,
  0xb5, 0xdd, 0xfe, 0xff, 0xff, 0xff, 0xbf, 0xea, 0x55, 0xdb, 0xad, 0xdd, 0xfe, 0xff, 0xa7, 0xb6,
  0xab, 0xb6, 0xcb, 0x9c, 0x73, 0x4a, 0x6d, 0x57, 0x39, 0xe7, 0x54, 0xee, 0x72, 0x3b, 0xe7, 0x5c,
  0xfd, 0xff, 0xb5, 0xab, 0x9d, 0xdb, 0xae, 0x94, 0x73, 0xae, 0xdc, 0xe5, 0xde, 0x6e, 0x53, 0x9f,
  0x7a, 0xe7, 0x9c, 0x2b, 0x77, 0xb9, 0x6b, 0x57, 0xbb, 0x72, 0xce, 0xb9, 0x57, 0xbd, 0x4a, 0xa7,
  0x7b, 0xd5, 0xab, 0xdc, 0xe5, 0x46, 0x58, 0xbb, 0xda, 0x95, 0x4e, 0xab, 0x4f, 0xbd, 0xdd, 0x5e,
  0xce, 0x39, 0xce, 0xff, 0xbf, 0x5e, 0xf5, 0x6e, 0x57, 0x3b, 0x27, 0x95, 0x7d, 0xd5, 0x33, 0xa5,
  0xcb, 0x5d, 0xee, 0x94, 0x73, 0x2e, 0xb9, 0xdd, 0x6e, 0xdf, 0x39, 0xa7, 0x94, 0x73, 0xce, 0xa7,
  0xcb, 0x6e, 0xdf, 0xd5, 0x2e, 0xa9, 0xa4, 0x92, 0xdb, 0xb7, 0xdb, 0xd4, 0xa7, 0xde, 0x6d, 0xb7,
  0x52, 0xc9, 0xb6, 0x33, 0x6d, 0xc7, 0xd8, 0xab, 0x5e, 0xe5, 0x9c, 0x73, 0xdb, 0xad, 0xbb, 0xdc,
  0x3e, 0x5d, 0xaf, 0x7a, 0xd5, 0xff, 0xef, 0x3e, 0xf5, 0xbb, 0xcb, 0xfd, 0x76, 0xa9, 0xb6, 0x2b,
  0xa9, 0xa4, 0xca, 0x5d, 0x6e, 0xab, 0xa4, 0xb3, 0x5b, 0xbb, 0xdd, 0xa7, 0xdd, 0xa7, 0x7e, 0xe7,
  0x9c, 0xea, 0xff, 0x4f, 0x7d, 0xea, 0xcb, 0x5d, 0x6e, 0xab, 0xa4, 0x6a, 0x57, 0xbb, 0xe4, 0x76,
  0xab, 0xa4, 0xdb, 0x2e, 0xdb, 0xce, 0xb4, 0x1d, 0x61, 0x72, 0x7b, 0x3a, 0x9d, 0x4e, 0x6f, 0xb7,
  0xe5, 0x2e, 0x77, 0xb9, 0xcb, 0xfd, 0xff, 0x9f, 0xda, 0xae, 0x72, 0xce, 0x39, 0xe7, 0x9c, 0xea,
  0x55, 0xaf, 0x74, 0xba, 0xdc, 0xe5, 0x76, 0x52, 0xc9, 0x5e, 0xf5, 0x2a, 0xbb, 0xad, 0x57, 0xbd,
  0xdb, 0xd5, 0x2e, 0xf5, 0xa9, 0xff, 0x55, 0xaf, 0x94, 0x54, 0x52, 0x6d, 0x57, 0xfd, 0xff, 0x56,
  0x49, 0xa7, 0xf3, 0xce, 0x39, 0xb7, 0x5d, 0x66, 0xb7, 0xce, 0x39, 0x87, 0x30, 0x42, 0x9d, 0x6e,
  0xbb, 0xdd, 0x6e, 0xb7, 0x5b, 0x9d, 0xe6, 0xe3, 0x6b, 0xbb, 0xd5, 0xe9, 0x9c, 0x73, 0x5e, 0x49,
  0x95, 0xbb, 0xdc, 0x56, 0x49, 0xd5, 0xab, 0xde, 0x6f, 0xdf, 0x39, 0xa7, 0x94, 0x73, 0x6e, 0xbb,
  0x4d, 0x7d, 0xea, 0x93, 0x4a, 0x5a, 0xa9, 0xec, 0xff, 0x9f, 0x92, 0x8a, 0x69, 0x3b, 0xe3, 0xff,
  0x5f, 0x3a, 0xad, 0x9c, 0x73, 0x08, 0x93, 0x4a, 0xda, 0xed, 0xaa, 0x57, 0xbd, 0xea, 0x55, 0xaf,
  0x7a, 0xd5, 0xdb, 0xed, 0x4a, 0x2a, 0x49, 0x29, 0x95, 0xa4, 0xec, 0x55, 0xcf, 0xe9, 0x9c, 0x53,
  0x4a, 0x2a, 0xd9, 0xab, 0x5e, 0x29, 0xa9, 0xa4, 0x92, 0xca, 0x6f, 0x67, 0xdd, 0xee, 0xb6, 0xcb,
  0x74, 0x5a, 0x49, 0x25, 0xa5, 0x92, 0xaa, 0x57, 0xbd, 0x92, 0x4a, 0xaa, 0x5e, 0xf5, 0x4a, 0x49,
  0x85, 0x2c
};


const unsigned char PROGMEM titleScreen[] = //128,56
{
  0x7f, 0x3f, 0xf9, 0xd2, 0x4a, 0x4a, 0x65, 0xad, 0xe2, 0x4b, 0x67, 0xb7, 0x4b, 0x25, 0x95, 0x73,
  0xce, 0x39, 0xe7, 0x9c, 0x73, 0xce, 0x49, 0x25, 0x95, 0x5d, 0x87, 0xbf, 0xad, 0x73, 0x52, 0xd9,
  0xf5, 0x5a, 0x49, 0xa9, 0xec, 0x3a, 0x7c, 0x6e, 0x9d, 0x93, 0xca, 0xae, 0xb7, 0x4e, 0x4a, 0xa5,
  0xe3, 0xe5, 0xb3, 0xb3, 0x2f, 0x97, 0x2f, 0x97, 0x13, 0xd5, 0xca, 0x3a, 0xa9, 0xec, 0xe8, 0x8a,
  0x2e, 0x99, 0x4c, 0x55, 0x2a, 0x99, 0xaa, 0x54, 0x32, 0x55, 0xa9, 0x64, 0xaa, 0x52, 0x11, 0xa5,
  0x94, 0xb3, 0x61, 0x17, 0x4b, 0x8c, 0x44, 0x74, 0xd9, 0xa5, 0x72, 0x6e, 0x62, 0xa9, 0xe4, 0x76,
  0x9b, 0x0e, 0x7a, 0xda, 0x61, 0x38, 0xbd, 0xdd, 0x2a, 0xa9, 0xec, 0x7a, 0x9d, 0x8e, 0x30, 0x9d,
  0x5e, 0xa7, 0x43, 0xb0, 0x92, 0x52, 0x4a, 0xe9, 0xec, 0xba, 0x96, 0xff, 0xbd, 0xfc, 0xfb, 0xfb,
  0xef, 0xe7, 0xb3, 0x4a, 0xf5, 0xe5, 0x56, 0x7d, 0x29, 0x25, 0x55, 0xed, 0x94, 0xdc, 0xa6, 0xd3,
  0xe9, 0xf4, 0x56, 0x49, 0x25, 0x2b, 0xa9, 0xa4, 0x92, 0x23, 0x33, 0xa9, 0x14, 0x57, 0x76, 0xe7,
  0xe6, 0xda, 0xb9, 0x91, 0x96, 0x54, 0xce, 0x29, 0x19, 0xac, 0x94, 0x5d, 0x2a, 0xe7, 0x94, 0xdc,
  0x86, 0xdd, 0x74, 0x3a, 0x9d, 0x4e, 0xa7, 0xd3, 0xa1, 0x3f, 0xbb, 0x4d, 0x67, 0x95, 0xac, 0xdc,
  0xe5, 0x3a, 0x75, 0xab, 0x4e, 0xdd, 0xaa, 0xdb, 0xde, 0xfa, 0xdc, 0x5d, 0x5b, 0x25, 0x9d, 0x6a,
  0x75, 0x39, 0x75, 0xea, 0x56, 0xee, 0xfe, 0xbf, 0x9d, 0xba, 0x55, 0x2f, 0x95, 0xbb, 0x5c, 0x67,
  0xb7, 0xf1, 0xa5, 0xa3, 0x4b, 0x67, 0xb7, 0xd1, 0x65, 0x97, 0x4a, 0x2a, 0xa7, 0xe4, 0x32, 0xbb,
  0xdc, 0x2e, 0x97, 0x4b, 0xe5, 0x9c, 0x92, 0xd9, 0x74, 0x76, 0xb9, 0x54, 0x72, 0xa9, 0x9c, 0x72,
  0x4e, 0x39, 0x25, 0x95, 0x53, 0x52, 0x6e, 0xb7, 0x74, 0xe9, 0x30, 0xbb, 0x74, 0xca, 0x6e, 0xd7,
  0xe9, 0x74, 0x3a, 0xbb, 0xcd, 0x2e, 0x97, 0xdf, 0xff, 0xad, 0xfa, 0xcf, 0x6e, 0xb7, 0x76, 0x26,
  0x39, 0x93, 0x72, 0x97, 0x5b, 0xb5, 0x4a, 0xed, 0x5a, 0xaf, 0xd7, 0x6b, 0x65, 0x95, 0x8e, 0xd1,
  0xb6, 0x4d, 0xa7, 0x52, 0xa9, 0xdb, 0x95, 0x52, 0xa9, 0xff, 0xa7, 0x52, 0x4e, 0x2d, 0xb7, 0xbb,
  0x6e, 0x57, 0xaa, 0x9c, 0x56, 0xda, 0x59, 0x25, 0x2b, 0x9d, 0x5d, 0xce, 0x9e, 0x4e, 0x6f, 0xb7,
  0x5b, 0x65, 0x77, 0xb5, 0xab, 0x5d, 0xad, 0x6e, 0x75, 0xaf, 0x7a, 0xd5, 0xb9, 0x74, 0x3a, 0x9b,
  0xce, 0x6e, 0x97, 0x4a, 0x2a, 0xe7, 0x9c, 0x53, 0x52, 0x2d, 0xff, 0xfe, 0xfe, 0x6f, 0xd5, 0xab,
  0xda, 0x2e, 0xb7, 0x4b, 0x25, 0x95, 0xdc, 0x6e, 0xd3, 0xa1, 0x6b, 0x2b, 0x95, 0xf7, 0x5b, 0x25,
  0x15, 0x71, 0x76, 0xbb, 0xdd, 0x86, 0x27, 0xb7, 0x4d, 0xa7, 0x63, 0xcc, 0x6e, 0x23, 0xdb, 0x6e,
  0xc3, 0x5a, 0x56, 0x39, 0xe7, 0x9c, 0x52, 0xa5, 0x54, 0xa9, 0x31, 0x97, 0x24, 0x52, 0x4b, 0xe5,
  0x6e, 0xf5, 0xb9, 0xdb, 0xf5, 0xea, 0x5f, 0x49, 0x6b, 0xd7, 0x5b, 0xe5, 0x9c, 0x73, 0x8a, 0xa9,
  0xb4, 0x57, 0xcb, 0x9d, 0x42, 0x57, 0x3a, 0xbb, 0xdd, 0x6e, 0x97, 0x4a, 0x2a, 0xa9, 0xe4, 0x76,
  0xbb, 0xdd, 0x6e, 0xb7, 0xd9, 0xed, 0x36, 0x9d, 0xdd, 0x6e, 0x97, 0x4a, 0x2a, 0xa9, 0x9c, 0x73,
  0x4e, 0xc9, 0xd9, 0x9c, 0x96, 0xd0, 0x56, 0x76, 0xbb, 0x54, 0x52, 0x39, 0xe7, 0x9c, 0x73, 0x4a,
  0x95, 0x52, 0xa5, 0x94, 0x74, 0xce, 0x39, 0xe7, 0xf4, 0x7a, 0xbd, 0x4e, 0xaf, 0xd3, 0xeb, 0x74,
  0xab, 0xdb, 0x39, 0xa9, 0x54, 0xb9, 0x4b, 0x2a, 0xa6, 0xf4, 0x3a, 0xae, 0x74, 0x3a, 0xbb, 0xcd,
  0x6e, 0xb3, 0x97, 0xeb, 0xd4, 0xfd, 0xcb, 0x9d, 0x53, 0xee, 0x72, 0x4b, 0x25, 0x9d, 0x92, 0xca,
  0x76, 0x7a, 0xbb, 0x2b, 0xa5, 0x4a, 0xa9, 0x72, 0x97, 0xbb, 0x5c, 0x67, 0xb7, 0xd9, 0x6d, 0xa7,
  0xd3, 0xdb, 0xed, 0x56, 0x49, 0x25, 0x95, 0x54, 0x52, 0xd5, 0xae, 0xb6, 0xdb, 0xed, 0x76, 0x9b,
  0x4e, 0xa7, 0xd3, 0x41, 0x4f, 0x69, 0xa7, 0x83, 0x9b, 0x9c, 0x93, 0xca, 0xae, 0xc3, 0x65, 0x2a,
  0xa5, 0xca, 0x49, 0x95, 0x4a, 0xfd, 0x2a, 0xf5, 0xb9, 0x4b, 0x2a, 0xa2, 0xb4, 0x92, 0x76, 0xa9,
  0x9c, 0x53, 0x72, 0x9b, 0x4e, 0x2a, 0x25, 0xb7, 0xdb, 0xe5, 0x76, 0x9b, 0x0e, 0xad, 0xe9, 0xf4,
  0x76, 0xbb, 0x4e, 0x6f, 0xd7, 0xe9, 0x74, 0x3a, 0xd7, 0xb9, 0xce, 0x65, 0xb7, 0x4a, 0x2a, 0xe7,
  0x9c, 0x73, 0x4e, 0x49, 0xe5, 0x9c, 0x53, 0x52, 0x49, 0x25, 0x95, 0x74, 0x4a, 0xae, 0xd3, 0xeb,
  0x75, 0xd0, 0x6d, 0x3a, 0x9d, 0xdd, 0x2a, 0xe7, 0x9c, 0x5c, 0xaf, 0x53, 0x9f, 0xfa, 0x9c, 0x93,
  0xeb, 0x5c, 0xe7, 0x1c, 0x2a, 0xb3, 0x4b, 0xe5, 0xdc, 0x38, 0xdb, 0x29, 0xa5, 0xdc, 0x72, 0x9b,
  0xfa, 0x5e, 0xa5, 0xd7, 0xe9, 0x74, 0x7a, 0x5d, 0x4a, 0xa5, 0xd3, 0x6b, 0xc9, 0xbe, 0x73, 0xdb,
  0x4e, 0x6f, 0xb7, 0xeb, 0xd8, 0xb3, 0xdb, 0xa5, 0x92, 0xdb, 0x98, 0x5d, 0xe8, 0x5a, 0x0f, 0xc9,
  0x02
};

const uint8_t PROGMEM mysticBalloon[] = //42,24
{
  0x29, 0x17, 0x22, 0xb2, 0x6d, 0xd3, 0xed, 0x4a, 0x6f, 0xdb, 0x95, 0x5e, 0x3b, 0xf5, 0xa9, 0x54,
  0x2a, 0x95, 0x52, 0xa5, 0x94, 0x4c, 0x27, 0x4b, 0x77, 0xab, 0x54, 0x2a, 0x95, 0xea, 0x5c, 0xe7,
  0x3a, 0x27, 0xab, 0x76, 0xb5, 0x2b, 0x9d, 0x6e, 0x97, 0xae, 0x73, 0x9d, 0xd3, 0xed, 0x2a, 0xdd,
  0xab, 0x5e, 0xdd, 0xb5, 0xa6, 0x23, 0xb2, 0xdb, 0xcb, 0xad, 0x5a, 0xdd, 0x4e, 0x71, 0xc9, 0xed,
  0xb5, 0xab, 0x9d, 0x55, 0x92, 0xc9, 0x6e, 0xed, 0xf6, 0x95, 0xb4, 0x76, 0x75, 0xaf, 0x7a, 0x25,
  0xed, 0xbf, 0x72, 0x2a, 0xd7, 0x76, 0xfb, 0xaf, 0x1c, 0x95, 0xdd, 0xbe, 0xb5, 0x4a, 0x96, 0x26,
  0xd2, 0xeb, 0x74, 0x3a, 0x9d, 0x4e, 0x67, 0xd7, 0xe9, 0x74, 0x3a, 0x9d, 0xce, 0xae, 0xd3, 0xe9,
  0x74, 0x76, 0x9d, 0x4e, 0xa7, 0xb3, 0xeb, 0x74, 0x76, 0x9d, 0x4e, 0xa7, 0xd3, 0xd9, 0x75, 0x3a,
  0x9d, 0x4e, 0x67, 0xb7, 0x69
};

const uint8_t PROGMEM mainMenu[] = //27,40
{
  0x1a, 0x27, 0x98, 0x6c, 0xba, 0x74, 0xc9, 0x52, 0xa9, 0x54, 0xaa, 0x64, 0xe9, 0x92, 0x55, 0x55,
  0x55, 0x55, 0x55, 0xaa, 0xd2, 0x25, 0x4b, 0x96, 0xac, 0x64, 0x95, 0x2e, 0x59, 0x55, 0xaa, 0xaa,
  0xaa, 0x54, 0x95, 0x2c, 0xbd, 0xe5, 0xe3, 0x6b, 0x7b, 0xae, 0xab, 0xbe, 0xea, 0x53, 0x6f, 0xcf,
  0xb5, 0xb5, 0xdb, 0xb7, 0xe7, 0xba, 0xae, 0xeb, 0x3a, 0xd7, 0xf6, 0xd4, 0xab, 0x52, 0x4a, 0xa6,
  0x52, 0x92, 0x8f, 0x8f, 0xef, 0x5d, 0x5d, 0xee, 0x74, 0xed, 0xec, 0xb9, 0xbe, 0x6a, 0x75, 0xbb,
  0x3a, 0xf5, 0xae, 0x4e, 0x7d, 0xd5, 0x57, 0x77, 0xb9, 0x9d, 0x4b, 0x7d, 0x5d, 0x97, 0x3b, 0xed,
  0xf8, 0xf8, 0xf8, 0xd4, 0xae, 0xce, 0x75, 0x5d, 0x97, 0x5b, 0xdd, 0xf6, 0x56, 0x57, 0x7d, 0x75,
  0xb7, 0x5a, 0xdd, 0xad, 0xbe, 0x9c, 0x73, 0xad, 0x56, 0x77, 0x57, 0xd7, 0x75, 0x75, 0x97, 0x5b,
  0xf1, 0xf1, 0x39, 0x27, 0x75, 0x4a, 0x95, 0xac, 0x54, 0x55, 0xaa, 0x2a, 0x9d, 0x52, 0x25, 0x2b,
  0x59, 0x29, 0x55, 0x3a, 0xa5, 0x4a, 0xa7, 0x52, 0x29, 0x55, 0x3a, 0xa5, 0x4a, 0xa5, 0x52, 0xa5,
  0xa4, 0x52, 0x52, 0x49, 0xe5, 0xb8, 0x00
};

const uint8_t PROGMEM mainMenuMask[] =
{
  0x1a, 0x27, 0x82, 0xce, 0x02, 0x27, 0xa5, 0xec, 0x76, 0xbb, 0xdd, 0x6e, 0xb7, 0xdb, 0xed, 0x76,
  0xbb, 0xdd, 0x6e, 0xb7, 0xdb, 0xed, 0x76, 0xbb, 0xdd, 0x6e, 0xb7, 0xdb, 0xed, 0x52, 0x01
};

const uint8_t PROGMEM soundMenu[] = //35,32
{
  0x22, 0x1f, 0x98, 0x6c, 0xba, 0x74, 0xa9, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x4a, 0x95, 0x2e, 0x59,
  0x55, 0xaa, 0xaa, 0xaa, 0x52, 0x95, 0xae, 0x54, 0xd5, 0x5d, 0xab, 0xeb, 0xae, 0x52, 0x95, 0x4a,
  0xe9, 0x74, 0x3a, 0x9d, 0xde, 0xe2, 0x33, 0xbd, 0x4e, 0xa7, 0xd3, 0xe9, 0x74, 0x5a, 0x47, 0x9b,
  0x6e, 0x7b, 0xae, 0xcb, 0x5d, 0xee, 0x5c, 0x4b, 0x95, 0xae, 0x4a, 0x55, 0xa5, 0x4a, 0x29, 0xa9,
  0x72, 0x57, 0xa5, 0xaa, 0x52, 0x95, 0x4c, 0xbd, 0xdd, 0x6e, 0x95, 0xc4, 0x27, 0x9e, 0xde, 0xd5,
  0xb9, 0xae, 0xeb, 0xba, 0x4e, 0xbd, 0xab, 0x53, 0x7f, 0xc9, 0xa5, 0x3d, 0xd7, 0x16, 0x7b, 0xf8,
  0x54, 0xd2, 0x39, 0xe7, 0x9c, 0x73, 0x3a, 0x77, 0xc9, 0x4a, 0x56, 0xee, 0xd2, 0xb9, 0x4b, 0x67,
  0x77, 0x9d, 0xbb, 0x74, 0xce, 0x39, 0xe7, 0x9c, 0x73, 0xce, 0x39, 0xe7, 0x9c, 0x53, 0x64
};

const uint8_t PROGMEM soundMenuMask[] =
{
  0x22, 0x1f, 0x82, 0xce, 0xd2, 0xf8, 0xdb, 0x2a, 0xa9, 0xa4, 0x92, 0x4a, 0x2a, 0xa9, 0xa4, 0x92,
  0xf0, 0x52, 0x3a, 0x9d, 0x4e, 0xa7, 0xd3, 0xe9, 0x2d, 0xfe, 0xe0, 0x35, 0xfc, 0x39, 0x27, 0x95,
  0x54, 0x52, 0x49, 0x25, 0x95, 0x54, 0x52, 0x49, 0x25, 0x95, 0x54, 0x52, 0x49, 0x25, 0x95, 0x54,
  0x52, 0x49, 0x25, 0x95, 0x54, 0x52, 0x49, 0x25, 0x95, 0x54, 0x52, 0x49, 0x25, 0x95, 0x73
};



const uint8_t PROGMEM selector[] = //33,16
{
  0x20, 0x0f, 0xb8, 0x9c, 0x92, 0xaa, 0x94, 0xea, 0x9d, 0x23, 0x4a, 0xa7, 0xd3, 0xe9, 0x74, 0x3a,
  0x9d, 0x4e, 0xa7, 0xd3, 0xe9, 0x74, 0x3a, 0x9d, 0x4e, 0xa7, 0xd3, 0xe9, 0x74, 0x3a, 0x9d, 0xb7,
  0xbc, 0xe9, 0x6d, 0x7c, 0xe9, 0x74, 0x3a, 0x9d, 0x4e, 0xa7, 0xd3, 0xe9, 0x74, 0x3a, 0x9d, 0x4e,
  0xa7, 0xd3, 0xe9, 0x74, 0x3a, 0x9d, 0x4e, 0xa7, 0xb3, 0xdb, 0xe8, 0x00
};


const uint8_t PROGMEM selectorMask[] =
{
  0x20, 0x0f, 0x94, 0xdc, 0x6e, 0xb7, 0xdb, 0x7d, 0xda, 0x6e, 0xb7, 0xdb, 0xed, 0x76, 0xbb, 0xdd,
  0x6e, 0xb7, 0xdb, 0xed, 0x76, 0xbb, 0xdd, 0x6e, 0xb7, 0xdb, 0xed, 0x76, 0xbb, 0xf5, 0x79, 0xbd,
  0x55, 0x52, 0xa7, 0xa4, 0x92, 0x4e, 0x2a, 0xa9, 0xa4, 0x92, 0x4a, 0x2a, 0xa9, 0xa4, 0x92, 0x4a,
  0x2a, 0xa9, 0xa4, 0x92, 0x4a, 0x2a, 0xa9, 0xa4, 0x92, 0x4a, 0x2a, 0xa9, 0xa4, 0x92, 0x4a, 0x2a,
  0xa9, 0xa4, 0x72, 0xce, 0x39, 0xa7, 0x24
};



PROGMEM const unsigned char stars[] = {
  // width, height
  7, 16,
  // frame 0
  0x00, 0x10, 0x38, 0x90, 0x00, 0x04, 0x06,
  0x00, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00,
  // frame 1
  0x10, 0x10, 0x7C, 0x10, 0x10, 0x00, 0x1C,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  // frame 2
  0x00, 0x10, 0x38, 0x10, 0x00, 0x04, 0x0E,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  // frame 3
  0x00, 0x00, 0x00, 0x80, 0x04, 0x04, 0x07,
  0x00, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00,
  // frame 4
  0x00, 0x00, 0x90, 0xC0, 0x84, 0x0E, 0x07,
  0x00, 0x01, 0x03, 0x07, 0x03, 0x01, 0x00,
};

PROGMEM const byte blinkingEyesLeftGuy[] = {
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 0,
  0, 1, 2, 3,
  4, 4, 4, 1,
};
PROGMEM const byte blinkingEyesRightGuy[] = {
  0, 0, 0, 0,
  0, 0, 0, 1,
  0, 2, 3, 3,
  2, 0, 0, 0,
  0, 0, 0, 0,
  0, 0, 0, 1,
  0, 2, 3, 3,
  2, 0, 0, 0,
};

PROGMEM const unsigned char leftGuyLeftEye[] = {
  // width, height
  5, 8,
  // frame 0
  0x06, 0x0E, 0x0E, 0x0C, 0x00,
  // frame 1
  0x02, 0x06, 0x0E, 0x0C, 0x00,
  // frame 2
  0x06, 0x0F, 0x0F, 0x07, 0x03,
  // frame 3
  0x03, 0x06, 0x0C, 0x00, 0x00,
  // frame 4
  0x00, 0x00, 0x00, 0x00, 0x00,
};

PROGMEM const unsigned char leftGuyRightEye[] = {
  // width, height
  6, 8,
  // frame 0
  0x00, 0x1C, 0x1E, 0x1E, 0x0E, 0x00,
  // frame 1
  0x00, 0x0C, 0x1E, 0x1E, 0x0C, 0x00,
  // frame 2
  0x00, 0x1C, 0x1E, 0x1F, 0x0F, 0x06,
  // frame 3
  0x04, 0x0C, 0x18, 0x10, 0x00, 0x00,
  // frame 4
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

PROGMEM const unsigned char rightGuyEyes[] = {
  // width, height
  16, 8,
  // frame 0
  0x20, 0x60, 0x60, 0x60, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x1C, 0x0E, 0x07, 0x03,
  // frame 1
  0x30, 0x70, 0x70, 0x70, 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1E, 0x0F, 0x07, 0x03,
  // frame 2
  0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x04, 0x02, 0x01,
  // frame 3
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};


void drawTitleScreen()
{
  if (arduboy.everyXFrames(1)) blinkingFrames++;
  if (arduboy.everyXFrames(2)) sparkleFrames++;
  if (sparkleFrames > 4) sparkleFrames = 0;
  if (blinkingFrames > 31) blinkingFrames = 0;
  arduboy.drawCompressed(0, 0, titleScreen, WHITE);
  arduboy.drawCompressed(85, 45, mysticBalloon, WHITE);
  sprites.drawSelfMasked(79, 43, stars, sparkleFrames);
  sprites.drawSelfMasked(9, 9, leftGuyLeftEye, pgm_read_byte(&blinkingEyesLeftGuy[blinkingFrames]));
  sprites.drawSelfMasked(15, 13, leftGuyRightEye, pgm_read_byte(&blinkingEyesLeftGuy[blinkingFrames]));
  sprites.drawSelfMasked(109, 34, rightGuyEyes, pgm_read_byte(&blinkingEyesRightGuy[blinkingFrames]));
}

void stateMenuIntro()
{
  counter++;
  if (counter < 46) arduboy.drawCompressed(0, 0, TEAMarg, WHITE);
  if (counter > 45) drawTitleScreen();
  if ((counter > 90) || buttons.justPressed(A_BUTTON | B_BUTTON)) gameState = STATE_MENU_MAIN;
}

void stateMenuMain()
{

  drawTitleScreen();
  arduboy.drawCompressed(51, 9, mainMenuMask, BLACK);
  arduboy.drawCompressed(51, 9, mainMenu, WHITE);
  if (buttons.justPressed(DOWN_BUTTON) && (menuSelection < 5)) menuSelection++;
  if (buttons.justPressed(UP_BUTTON) && (menuSelection > 2)) menuSelection--;
  if (buttons.justPressed(A_BUTTON | B_BUTTON)) gameState = menuSelection;
  arduboy.drawCompressed(46, 9 + 9 * (menuSelection - 2), selectorMask, BLACK);
  arduboy.drawCompressed(46, 9 + 9 * (menuSelection - 2), selector, WHITE);
}

void stateMenuHelp()
{
  arduboy.drawCompressed(32, 0, qrcode, WHITE);
  if (buttons.justPressed(A_BUTTON | B_BUTTON)) gameState = STATE_MENU_MAIN;
}

void stateMenuPlay()
{
  gameState = STATE_GAME_PLAYING;
}

void stateMenuInfo()
{
  if (arduboy.everyXFrames(10)) sparkleFrames++;
  if (sparkleFrames > 4) sparkleFrames = 0;
  arduboy.drawCompressed(43, 23, mysticBalloon, WHITE);
  sprites.drawSelfMasked(37, 21, stars, sparkleFrames);
  if (buttons.justPressed(A_BUTTON | B_BUTTON)) gameState = STATE_MENU_MAIN;
}

void stateMenuSoundfx()
{
  drawTitleScreen();
  arduboy.drawCompressed(51, 9, soundMenuMask, BLACK);
  arduboy.drawCompressed(51, 9, soundMenu, WHITE);
  if (buttons.justPressed(DOWN_BUTTON)) soundYesNo = true;
  if (buttons.justPressed(UP_BUTTON)) soundYesNo = false;
  arduboy.drawCompressed(54, 18 + 9 * soundYesNo, selectorMask, BLACK);
  arduboy.drawCompressed(54, 18 + 9 * soundYesNo, selector, WHITE);
  if (buttons.justPressed(A_BUTTON | B_BUTTON))
  {
    arduboy.audio.save_on_off();
    gameState = STATE_MENU_MAIN;
  }
  if (soundYesNo == true) arduboy.audio.on();
  else arduboy.audio.off();
}


#endif
